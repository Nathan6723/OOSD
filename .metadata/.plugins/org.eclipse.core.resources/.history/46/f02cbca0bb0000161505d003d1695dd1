package model;

import java.util.Scanner;

import controller.GameController;

public abstract class Unit implements Object
{  
	private String name;
	private int health;
	private int damage;
	private boolean meleeAttack;
	private int startingX;
	private int startingY;
	private char icon;
	private int attackRadius;
	private Team team;
	public Unit(String name,int attackRadius, int health, int damage, boolean meleeAttack, int startingX, int startingY,char icon) {
	
		this.name = name;
		
		this.health = health;
		this.damage = damage;
		this.meleeAttack = meleeAttack;
		this.startingX = startingX;
		this.startingY = startingY;
		this.icon=icon;
	    this.attackRadius=attackRadius;
	}



	
	public Team getTeam() {
		return team;
	}




	public void setTeam(Team team) {
		this.team = team;
	}




	public int getAttackRadius() {
		return attackRadius;
	}




	public void setAttackRadius(int attackRadius) {
		this.attackRadius = attackRadius;
	}




	public char getIcon() {
		return icon;
	}




	public void setIcon(char icon) {
		this.icon = icon;
	}




	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getHealth() {
		return health;
	}

	public void setHealth(int health) {
		this.health = health;
	}

	public int getDamage() {
		return damage;
	}

	public void setDamage(int damage) {
		this.damage = damage;
	}

	public boolean isMeleeAttack() {
		return meleeAttack;
	}

	public void setMeleeAttack(boolean meleeAttack) {
		this.meleeAttack = meleeAttack;
	}

	public void setStartingX(int startingX) {
		this.startingX = startingX;
	}

	public void setStartingY(int startingY) {
		this.startingY = startingY;
	}


	
	public boolean attack(int x, int y)
	{
	
		return true; 
	}
	
	public boolean isAttack(){
		if(this.health>0)
		return true;
		else{
		System.out.println("unit is dead ");
			return false;
		}
	}
	
	
	public void decrementHealth(int damage){
	health=health-damage;
	}
	
	public abstract boolean move(int xsteps,int ysteps);
	public  boolean attack(Board b,Unit unit)
	{
		boolean p=false;
	 Scanner sc=new Scanner(System.in);
		if(isAttack()){
	Unit[] u=new Unit[3];
	
    int  vertical=unit.getStartingX()+unit.attackRadius;
    int horizontal=unit.getStartingY()+unit.attackRadius;
    int  negvertical=unit.getStartingX()-unit.attackRadius;
    int neghoriontal=unit.getStartingY()-unit.attackRadius;
    
    //fire in positive vertical direction 
    for(int i=unit.getStartingX();i<vertical;i++){
    	 if(b.checkBounds(i,unit.getStartingY())){
 			Cell[][] c=b.getAllCells();
 			 if(c[i][unit.getStartingY()].getUnit()!=null&&c[i][unit.getStartingY()].getUnit().getTeam().getName()!=unit.getTeam().getName()){	     
 				u[i]=c[i][unit.getStartingY()].getUnit(); 
 			 }
 		 }
    	
    }
   //fire in positive horizontal direction
    
    for(int j=unit.getStartingY();j<horizontal;j++){
   	 if(b.checkBounds(unit.getStartingX(),j)){
			Cell[][] c=b.getAllCells();
			 if(c[unit.getStartingX()][j].getUnit()!=null&&c[unit.getStartingX()][j].getUnit().getTeam().getName()!=unit.getTeam().getName()){	     
				u[j]=c[unit.getStartingX()][j].getUnit(); 
			 }
		 }
   	
   }
    
    
    //fire  in negative vertical direction
    for(int i=unit.getStartingX();i>negvertical;i--){
           //int x=(2*-i)+i;
    	if(b.checkBounds(i,unit.getStartingY())){
			Cell[][] c=b.getAllCells();
			 if(c[i][unit.getStartingY()].getUnit()!=null&&c[i][unit.getStartingY()].getUnit().getTeam().getName()!=unit.getTeam().getName()){	     
				u[i]=c[i][unit.getStartingY()].getUnit(); 
			 }
		 }
   	
   }
    
    
    
    
    
    
    	if(unit.getTeam().getName().equals("Heroes")){
    for(int i=unit.getStartingX();i<horizontal;i++){
		 for(int j=unit.getStartingY();j<vertical;j++){
			 if(b.checkBounds(i, j)){
			Cell[][] c=b.getAllCells();
			 if(c[i][j].getUnit()!=null&&c[i][j].getUnit().getTeam().getName()!=unit.getTeam().getName()){
				     
				u[i]=c[i][j].getUnit(); 
			 }
		 }
	 }
    }
		}
    	
    	
      	if(unit.getTeam().getName().equals("Villians")){
      	    for(int i=unit.getStartingX();i>neghorizontal;i--){
      			 for(int j=unit.getStartingY();j>negvertical;j--){
      				 
      				 if(b.checkBounds(i, j)){
      	//				 if(i<0)
      	  
      				Cell[][] c=b.getAllCells();
      				 if(c[i][j].getUnit()!=null&&c[i][j].getUnit().getTeam().getName()!=unit.getTeam().getName()){
      					     
      					u[i]=c[i][j].getUnit(); 
      				 }
      			 }
      		 }
      			}
      	}
    	
    	
    	
    	
    	
		if(u!=null){
			int k=0;
		for(int i=0;i<u.length;i++){
		if(u[i]!=null){
		System.out.println("Following opponents are in your range "+i+"."+u[i]);
		k++;}
		}
		
		if(k!=0){
		System.out.println("whom do you want to attack choose  the line number");
		
	
	  int opponent=sc.nextInt();
	  System.out.println(opponent);

		
	  opponent--;
	  u[opponent].setHealth(u[opponent].getHealth()-this.getDamage());
	  System.out.println("Remaining Health of " + u[opponent].getName()+" is"+  u[opponent].getHealth());
p=true;
		}
}
		
		
	
		
		}

			else{
				 System.out.println("no one within the  attack radius");
		p= false;
			}
	

	
		
		return p;
		//return  true;
	}
	
	public abstract void useSpecialPower();
		
	
	
	public int getStartingX()
	{
		return startingX;
	}
	
	public int getStartingY()
	{
		return startingY;
	}
}
